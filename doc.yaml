openapi: 3.0.1
info:
  title: Jarvis API
  description: Doc pour l'api Jarivs
  contact:
    email: dev@jarvis-app.fr
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://jarvis-app.fr/v2
  - url: http://jarvis-app.fr/v2
tags:
  - name: Auth
    description: Tout ce qui est connexion, inscription...
  - name: User
    description: Toutes les opérations et informations à propos de l'utilisateur
paths:
  /auth/signup:
    post:
      tags:
        - Auth
      summary: Créer un nouvel utilisateur
      operationId: createNewUser
      description: Créer un nouvel utilisateur et envoie un mail de confirmation à l'adresse renseigné.
      requestBody:
        description: Les informations nécessaires pour créer un nouvelle utilisateur
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/NewUser"
        required: true
      responses:
        200:
          description: "Succès"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicApiResponse"
              examples:
                success:
                  value:
                    code: 10
                    message: User successfully added!
        400:
          description: "Erreur"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicApiResponse"
              examples:
                error:
                  value:
                    code: 10
                    message: Birthdate parameter is missing.
      x-codegen-request-body-name: body
  /auth/signin:
    post:
      tags:
        - Auth
      summary: Se connecter
      operationId: signin
      description: Renvoi un access token valable 15 minutes. Il est possible d'obtenir un refresh token afin de l'échanger contre un access token et ce, sans connexion de la part de l'utilisateur.
      requestBody:
        description: Les informations nécessaires pour créer un nouvelle utilisateur
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        200:
          description: "Succès"
          content:
            application/json:
              schema:
                schema:
                  type: object
                  properties:
                    email:
                      type: string
                    accessToken:
                      type: string
                    expiresAt:
                      type: integer
                      description: date et heure de l'expiration au format epoch
              examples:
                success:
                  value:
                    email: zangoDeDozo@kdoublea.fr
                    accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Im1hbW1hci5jeXJpbEBlcGl0ZWNoLmV1IiwiaWF0IjoxNjAzNTgwMjQ2LCJleHAiOjE2MDM2NjY2NDZ9.O6lnbFG4Ff5vvPAWor3wI-TrGkB8mV4fbxPs9IdQ15Q
                    expiresAt: 1603580333325
        401:
          description: "Erreur"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicApiResponse"
              examples:
                notActivated:
                  description: Compte non activé
                  value:
                    code: 0
                    message: Your account is not activated.
        400:
          description: "Erreur"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicApiResponse"
              examples:
                notRegistered:
                  description: Utilisateur inexistant
                  value:
                    code: 0
                    message: It doesn't match any of our credentials...
      x-codegen-request-body-name: body
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        description: List of user object
        content:
          "*/*":
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        description: List of user object
        content:
          "*/*":
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    NewUser:
      required:
        - birthdate
        - email
        - firstname
        - lastname
        - password
        - secretQuestion
        - secretQuestionAnswer
        - type
      type: object
      properties:
        email:
          type: string
          example: ElonMuskOffice@TeslaMotors.com
        type:
          type: integer
          format: int64
        password:
          type: string
          example: JeSuisSecret123
        firstname:
          type: string
          example: Armand
        lastname:
          type: string
          example: Gnakouri
        birthdate:
          type: string
          example: 11/09/2001
        secretQuestion:
          type: string
          example: BENJAMIN ?????
        secretQuestionAnswer:
          type: string
          example: Préjant
      xml:
        name: NewUser
    BasicApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    api_key:
      type: apiKey
      name: x-access-token
      in: header